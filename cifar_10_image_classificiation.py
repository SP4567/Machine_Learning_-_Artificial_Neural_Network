# -*- coding: utf-8 -*-
"""Cifar-10 image classificiation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jkxeTrdF-m-Rbmipj7LZgkvLGEKMuJIW
"""

import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
from tensorflow.keras import layers
import pandas as pd

(X_train, y_train), (X_test, y_test) = tf.keras.datasets.cifar10.load_data()

X_train.shape

y_train.shape

X_test.shape

y_test.shape

i = 30009
plt.imshow(X_train[i])
print(y_train[i])

L_grid = 5
W_grid = 5
fig, axes = plt.subplots(L_grid, W_grid, figsize = (25,25))
axes = axes.ravel()
n_training = len(X_train)
for i in np.arange(0, W_grid * L_grid):
  index = np.random.randint(0, n_training)
  axes[i].imshow(X_train[index])
  axes[i].set_title(y_train[index])
  axes[i].axis("off")
plt.subplots_adjust(hspace = 0.4)

n_training

X_train

X_train = X_train.astype('float32')
X_test = X_test.astype('float32')

number_cat = 10

y_train

import keras
y_train = keras.utils.to_categorical(y_train, number_cat)

y_train

y_test = keras.utils.to_categorical(y_test, number_cat)

y_test

X_train = X_train/255
X_test = X_test/255

X_train

X_train.shape

X_test

y_train.shape

Input_shape = X_train.shape[1:]

Input_shape

cnn_model = tf.keras.models.Sequential()
cnn_model.add(layers.Conv2D(32, (3, 3), activation = 'relu', input_shape = (32, 32, 3)))
cnn_model.add(layers.Conv2D(32, (3, 3), activation = 'relu'))
cnn_model.add(tf.keras.layers.Dropout(0.3))
cnn_model.add(layers.MaxPooling2D(2,2))
cnn_model.add(layers.Conv2D(64, (3, 3), activation = 'relu'))
cnn_model.add(layers.Conv2D(64, (3, 3), activation = 'relu'))
cnn_model.add(layers.MaxPooling2D(2,2))
cnn_model.add(tf.keras.layers.Dropout(0.3))
cnn_model.add(layers.Flatten())
cnn_model.add(layers.Dense(1024, activation = 'relu'))
cnn_model.add(tf.keras.layers.Dropout(0.3))
cnn_model.add(layers.Dense(1024, activation = 'relu'))
cnn_model.add(layers.Dense(10, activation = 'softmax'))
cnn_model.summary()

cnn_model.compile(optimizer = 'Adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])

epochs_hist = cnn_model.fit(X_train, y_train, epochs = 100, batch_size = 512)

epochs_hist.history.keys()

eh = epochs_hist.history['loss']
eh2 = epochs_hist.history['accuracy']
plt.plot(eh)
plt.plot(eh2)
plt.title("Loss and accuracy graph while training the model")
plt.xlabel("epochs")
plt.ylabel("loss and accuracy variation \n with increase in epochs")
plt.legend({'loss', 'accuracy'})

evaluation = cnn_model.evaluate(X_test, y_test)
print('test Accuracy: {}'.format(evaluation[1]))

predicted_classes = cnn_model.predict(X_test)

class_x = np.argmax(predicted_classes, axis = 1)

class_x

y_test

y_test = np.argmax(predicted_classes, axis = 1 )

y_test

W = 5
L = 5
fig, axes = plt.subplots(L, W, figsize = (12, 12))
axes = axes.ravel()
for i in np.arange(0, L * W):
  axes[i].imshow(X_test[i])
  axes[i].set_title("Prediction = {}\n True = {}".format(class_x[i], y_test[i]))
  axes[i].axis('off')
plt.subplots_adjust(wspace = 1)