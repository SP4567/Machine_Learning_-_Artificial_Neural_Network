# -*- coding: utf-8 -*-
"""Breast_cancer_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vWJCHA2fKhZCPwIRtPi6tQFXYB39ZqTY
"""

import tensorflow as tf
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from tensorflow.keras import layers

brc = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/data.csv')

brc.head(5)

sns.countplot(x = 'diagnosis', data = brc)

brc = brc.drop(labels = 'id', axis = 1)
brc

selected_features = {'texture_mean', 'smoothness_mean', 'texture_worst', 'smoothness_worst',	'symmetry_worst',	'fractal_dimension_worst'}
X = brc[selected_features]

X.shape

y = brc[['diagnosis']]
y.shape

Fig, ax = plt.subplots(figsize = (7,7))
sns.heatmap(X.corr(), annot = True)

from sklearn.preprocessing import OneHotEncoder
one_hot = OneHotEncoder()
y = one_hot.fit_transform(y).toarray()

#X = brc.iloc[:,2:17].values

X.head(5)

y

from sklearn.preprocessing import MinMaxScaler
SS = MinMaxScaler()
X_scaled = SS.fit_transform(X)

X_scaled.shape

y_scaled = SS.fit_transform(y)
y_scaled.reshape(-1,1)

y_scaled.shape

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_scaled,y_scaled, test_size = 0.2)

X_train.shape

X_test.shape

y_train.shape

y_test.shape

input_shape = X_train.shape[1:]
input_shape

model = tf.keras.models.Sequential();
model.add(tf.keras.layers.Dense(units = 64, activation = 'relu', input_shape=(6,)))
model.add(tf.keras.layers.Dense(units = 32, activation = 'relu'))
model.add(tf.keras.layers.Dense(units = 32, activation = 'relu'))
model.add(tf.keras.layers.Dense(units = 1, activation = 'linear'))
model.summary()

model.compile(optimizer = 'Adam', loss = 'binary_crossentropy', metrics = 'accuracy')

epoch_hist = model.fit(X_train, y_train, epochs = 100, batch_size = 512)

epoch_hist.history.keys()

eh = epoch_hist.history['loss']
plt.plot(eh)
plt.xlabel('epochs')
plt.ylabel('loss')
plt.title('Loss during training the model')
plt.legend({'Loss'})

evaluation = model.evaluate(X_test, y_test)
print('test_accuracy:{}'.format(evaluation[1]*100))

y_predict = model.predict(X_test)
y_predict

y_train_predict = model.predict(X_train)
y_train_predict

from sklearn.linear_model import LinearRegression
model1 = LinearRegression()

model1.fit(X_train,y_train)

model1.score(X_test, y_test)

#y = y.reshape(-1,1)

from sklearn.ensemble import RandomForestClassifier
model2 = RandomForestClassifier()
model2.fit(X_train, y_train)
model2.score(X_test, y_test)

from sklearn.neighbors import KNeighborsClassifier
model3 = KNeighborsClassifier()
model3.fit(X_train, y_train)
model3.score(X_test, y_test)

