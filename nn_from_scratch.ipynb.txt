{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter the number of epochs:4\n",
      "enter the 1st input:1\n",
      "enter the 1st weight:0\n",
      "enter the 2nd input:1\n",
      "enter the 2nd weight:0\n",
      "enter the 3rd input:1\n",
      "enter the 3rd weight:0\n",
      "enter the 4th input:1\n",
      "enter the 4th weight:0\n",
      "enter the value alpha1\n",
      "enter the target value1\n",
      "enter the value of bias1\n",
      "1\n",
      "enter the 1st input:-1\n",
      "enter the 1st weight:1\n",
      "enter the 2nd input:-1\n",
      "enter the 2nd weight:-1\n"
     ]
    }
   ],
   "source": [
    "def neural_network():\n",
    "        epochs = int(input(\"enter the number of epochs:\"))\n",
    "        for epochs in range(20):\n",
    "            x1 = int(input(\"enter the 1st input:\"))\n",
    "            w1 = int(input(\"enter the 1st weight:\"))\n",
    "            x2 = int(input(\"enter the 2nd input:\"))\n",
    "            w2 = int(input(\"enter the 2nd weight:\"))\n",
    "            x3 = int(input(\"enter the 3rd input:\"))\n",
    "            w3 = int(input(\"enter the 3rd weight:\"))\n",
    "            x4 = int(input(\"enter the 4th input:\"))\n",
    "            w4 = int(input(\"enter the 4th weight:\"))\n",
    "            alpha = int(input(\"enter the value alpha\"))\n",
    "            target = int(input(\"enter the target value\"))\n",
    "            bias = int(input(\"enter the value of bias\"))\n",
    "            y_input = int(0)\n",
    "            del_bias = alpha*target\n",
    "            del_w1 = alpha*target*x1\n",
    "            del_w2 = alpha*target*x2\n",
    "            del_w3 = alpha*target*x3\n",
    "            del_w4 = alpha*target*x4\n",
    "            w1 = del_w1+w1\n",
    "            w2 = del_w2+w2\n",
    "            w3 = del_w3+w3\n",
    "            w4 = del_w4+w4\n",
    "            y_input = bias+(w1*x1)+(w2*x2)+(w3*x3)+(w4*x4)\n",
    "            if y_input > 0:\n",
    "                print(1)\n",
    "            elif y_input == 0:\n",
    "                print(0)\n",
    "            else: \n",
    "                print(-1)\n",
    "neural_network()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
