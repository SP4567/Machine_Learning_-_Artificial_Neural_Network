# -*- coding: utf-8 -*-
"""Credit_history_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12kRBMYrm6rXn62xB1SwjIK-yfCrBZ_04
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf
from sklearn.metrics import confusion_matrix,classification_report

c = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/credit_risk.csv')

c.head(5)

c.info()

sns.countplot(x = 'class', data = c)

c.replace({'good':1,'bad':0}, inplace = True)

c.head(5)

X = c.drop(labels = {'class'}, axis = 1)
y = c['class']

X = pd.get_dummies(X)

X

scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

X_scaled

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

classifier_model = tf.keras.models.Sequential()
classifier_model.add(tf.keras.layers.Dense(units = 32, activation = 'relu', input_shape = (61,)))
classifier_model.add(tf.keras.layers.Dense(units = 64, activation = 'relu'))
classifier_model.add(tf.keras.layers.Dense(units = 64, activation = 'relu'))
classifier_model.add(tf.keras.layers.Dense(units = 1, activation = 'sigmoid'))

classifier_model.compile(optimizer = 'Adam', loss = 'binary_crossentropy', metrics = 'accuracy')

epochs_hist = classifier_model.fit(X_train,y_train,epochs = 100, validation_split = 0.2)

epochs_hist.history.keys()

eh =epochs_hist.history['loss']
eh2 = epochs_hist.history['accuracy']
eh3 = epochs_hist.history['val_loss']
eh4 = epochs_hist.history['val_accuracy']
plt.plot(eh)
plt.plot(eh2)
plt.plot(eh3)
plt.plot(eh4)
plt.xlabel('epochs')
plt.ylabel('loss, accuracy,val_loss, val_accuracy')
plt.legend({'loss', 'accuracy', 'val_loss', 'val_accuracy'})

y_predict = classifier_model.predict(X_test)

y_predict

y_predict = (y_predict > 0.5)

y_predict

y_train_predict = classifier_model.predict(X_train)

y_train_predict = (y_train_predict>0.5)

y_train_predict

cm = confusion_matrix(y_train,y_train_predict)
sns.heatmap(cm,annot = True)

cm2 = confusion_matrix(y_test,y_predict)
sns.heatmap(cm2,annot = True)

evaluation = classifier_model.evaluate(X_test,y_test)
print('test_accuracy:{}'.format(evaluation[1]))