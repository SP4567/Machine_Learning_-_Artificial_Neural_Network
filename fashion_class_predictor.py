# -*- coding: utf-8 -*-
"""fashion_class_predictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A6cFztbyeBbL8buecVylUhfkGhKhLfPb
"""

import tensorflow as tf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

ftrd = pd.read_csv('/content/fashion-mnist_train.csv', sep = ',')

fttd = pd.read_csv('/content/fashion-mnist_test.csv', sep = ',')

ftrd.head(5)

fttd.head(5)

fttd.tail(5)

ftrd.tail(4)

training = np.array(ftrd, dtype = 'float32')
training

testing = np.array(fttd, dtype = 'float32')

testing

training.shape

testing.shape

import random
i = random.randint(1, 60000)
plt.imshow(training[i, 1:].reshape(28,28))

label = training[i, 0]

label

L_grid = 15
W_grid = 15
fig, axes = plt.subplots(L_grid, W_grid, figsize = (28, 28))
axes = axes.ravel()
n_training = len(training)
for i in np.arange(0, W_grid* L_grid):
  index = np.random.randint(0, n_training)
  axes[i].imshow(training[index, 1:].reshape(28,28))
  axes[i].set_title(training[index, 0], fontsize = 8)
  axes[i].axis("off")
plt.subplots_adjust(hspace = 0.4)

X_train = training[:, 1:]/255
y_train = training[:, 0]

X_test = testing[:, 1:]/255
y_test = testing[:, 0]

X_train.shape

y_train.shape

X_train = X_train.reshape(X_train.shape[0], *(28,28,1))
X_test = X_test.reshape(X_test.shape[0], *(28,28,1))

X_train.shape

X_test.shape

from tensorflow.keras import layers
cnn = tf.keras.models.Sequential()
cnn.add(layers.Conv2D(32, (3, 3), activation = 'relu', input_shape = (28, 28, 1)))
cnn.add(layers.MaxPooling2D(2,2))
cnn.add(layers.Conv2D(64, (3, 3), activation = 'relu'))
cnn.add(layers.MaxPooling2D(2,2))
cnn.add(layers.Conv2D(64, (3, 3), activation = 'relu'))
cnn.add(layers.MaxPooling2D(2,2))
cnn.add(layers.Flatten())
cnn.add(layers.Dense(64, activation = 'relu'))
cnn.add(layers.Dense(10, activation = 'softmax'))
cnn.summary()

cnn.compile(optimizer = 'Adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])

epochs_hist = cnn.fit(X_train, y_train, epochs = 50, batch_size = 512)

epochs_hist.history.keys()

eh = epochs_hist.history['loss']
eh2 = epochs_hist.history['accuracy']
plt.plot(eh)
plt.plot(eh2)
plt.title("Loss and Accuracy graph")
plt.xlabel("epochs")
plt.ylabel("Loss and Accuracy")
plt.legend({'loss', 'accuracy'})

evaluation = cnn.evaluate(X_test, y_test)
evaluation

predicted_classes = cnn.predict(X_test)
w = 5
l = 5
fig, axes = plt.subplots(l, w, figsize = (12, 12))
axes = axes.ravel()
for i in np.arange(0, l * w):
  axes[i].imshow(X_test[i].reshape((28,28)))
  axes[i].set_title("Prediction Class = {}\n True Class = {}".format(predicted_classes[i], y_test[i]))
  axes[i].axis('off')
plt.subplots_adjust(wspace = 0.5)

