# -*- coding: utf-8 -*-
"""CNN-Exercise.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gFJV5ziKpDmpDp29mIlzjnJ-g0KURk7P
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Flatten
from tensorflow.keras.datasets import fashion_mnist

(X_train, y_train), (X_test, y_test) = fashion_mnist.load_data()

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

image = X_train[0]

plt.imshow(image)

X_test[0]

image

image.max()

X_train = X_train/255
X_test = X_test/255

X_train.min()

X_train.max()

y_train = y_train.reshape(-1,1)

y_train

from tensorflow.keras.utils import to_categorical

y_cat_test = to_categorical(y_test, num_classes = 10)

y_cat_train = to_categorical(y_train, num_classes = 10)

y_cat_test

y_cat_train

y_cat_train.shape

y_cat_test.shape

X_train.shape

X_train = X_train.reshape(60000, 28, 28,1)
X_test = X_test.reshape(10000, 28, 28,1)

X_train

X_test

fashion_mnist = Sequential()
fashion_mnist.add(Conv2D(32, kernel_size = (4,4), input_shape = (28,28,1)))
fashion_mnist.add(MaxPooling2D(pool_size = (2,2))),
fashion_mnist.add(Flatten())
fashion_mnist.add(Dense(128, activation = 'relu')),
fashion_mnist.add(Dense(10, activation = 'softmax'))
fashion_mnist.compile(optimizer='rmsprop', loss = 'categorical_crossentropy', metrics = ['accuracy'])

fashion_mnist.summary()

from tensorflow.keras.callbacks import EarlyStopping
early_stop = EarlyStopping(monitor = 'val_loss', patience = 2)

epochs_hist = fashion_mnist.fit(X_train, y_cat_train, epochs = 10, validation_data = (X_test, y_cat_test), callbacks=[early_stop])

epochs_hist.history.keys()

eh1 = epochs_hist.history['loss']
eh2 = epochs_hist.history['accuracy']
eh3 = epochs_hist.history['val_loss']
eh4 = epochs_hist.history['val_accuracy']
plt.plot(eh1)
plt.plot(eh2)
plt.plot(eh3)
plt.plot(eh4)
plt.xlabel('Epochs')
plt.ylabel('loss,accuracy,val_loss,val_accuracy')
plt.legend(['loss', 'accuracy', 'val_loss', 'val_accuracy'])

y_predict = fashion_mnist.predict(X_test)

y_train_predict = fashion_mnist.predict(X_train)

y_predict

y_train_predict

Class_x = np.argmax(y_predict, axis = 1)
Class_X = np.argmax(y_train_predict, axis = 1)

Class_x

Class_X

y_train

y_test = y_test.reshape(-1,1)

y_test

from sklearn.metrics import confusion_matrix, classification_report
cm = confusion_matrix(y_test, Class_x)
cm2 = confusion_matrix(y_train, Class_X)

plt.figure(figsize = (15,10))
print('Testing matrix')
sns.heatmap(cm, annot = True)

plt.figure(figsize = (15,10))
print('Training matrix')
sns.heatmap(cm2, annot = True)

print('Testing Report:\n', classification_report(y_test, Class_x))
print('Training Report: \n', classification_report(y_train, Class_X ))

fashion_mnist.save('Fashion_class_Cnn.keras')

from tensorflow.keras.models import load_model
new_mnist = load_model('Fashion_class_Cnn.keras')

new_mnist.summary()

test_image = X_test[0]

predictions = new_mnist.predict(test_image.reshape(1,28,28,1))

predictions

class_pred = np.argmax(predictions)

print("Class Predicted:",class_pred)

plt.imshow(test_image)