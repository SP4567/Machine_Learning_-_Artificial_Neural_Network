# -*- coding: utf-8 -*-
"""PCOS_PREDICTOR(with ANN, Logistic_regression, Random_forest, KNN).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k8MkRI7xbqxz2Wy-tQACDc8fz1qOIbmp
"""

import tensorflow as tf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report

pcos = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/PCOS_data.csv')

pcos.head(5)

sns.countplot(x = 'PCOS (Y/N)', data = pcos)

fig, ax = plt.subplots(figsize = (30,30))
sns.heatmap(pcos.corr(), annot = True)

pcos.info()

pcos = pcos.drop(labels = {'Pregnant(Y/N)'}, axis = 1)

pcos.info()

pcos = pcos.drop(labels = {'Marraige Status (Yrs)'}, axis = 1)

pcos.info()

pcos['Fast food (Y/N)'] = pcos['Fast food (Y/N)'].fillna(method = 'ffill')

selected_features = {' Age (yrs)', 'Weight (Kg)','BMI','Blood Group','RR (breaths/min)','Hb(g/dl)','Cycle(R/I)','No. of abortions','  I   beta-HCG(mIU/mL)','II    beta-HCG(mIU/mL)','FSH(mIU/mL)','LH(mIU/mL)','Hip(inch)','Waist(inch)','Waist:Hip Ratio','TSH (mIU/L)', 'PRL(ng/mL)', 'Weight gain(Y/N)', 'hair growth(Y/N)', 'Skin darkening (Y/N)', 'Hair loss(Y/N)', 'Hair loss(Y/N)', 'Pimples(Y/N)', 'Fast food (Y/N)',	'Reg.Exercise(Y/N)','BP _Systolic (mmHg)',	'BP _Diastolic (mmHg)','Follicle No. (L)',	'Follicle No. (R)',	'Avg. F size (L) (mm)',	'Avg. F size (R) (mm)',	'Endometrium (mm)'}

X = pcos[selected_features]

y = pcos['PCOS (Y/N)']

Scaler = MinMaxScaler()
X_scaled = Scaler.fit_transform(X)

X_scaled

X_train,X_test,y_train,y_test = train_test_split(X_scaled, y, test_size = 0.2)

X_train.shape

X_test.shape

y_train.shape

y_test.shape

pcos_classifier_model = tf.keras.models.Sequential()
pcos_classifier_model.add(tf.keras.layers.Dense(units = 400, activation = 'relu', input_shape = (31,)))
pcos_classifier_model.add(tf.keras.layers.Dense(units = 400, activation = 'relu'))
pcos_classifier_model.add(tf.keras.layers.Dense(units = 400, activation = 'relu'))
pcos_classifier_model.add(tf.keras.layers.Dense(units = 1, activation = 'sigmoid'))

pcos_classifier_model.compile(optimizer = 'Adam', loss = 'binary_crossentropy', metrics = 'accuracy')

epochs_hist = pcos_classifier_model.fit(X_train, y_train, epochs = 50, batch_size = 512)

epochs_hist.history.keys()

eh = epochs_hist.history['loss']
eh2 = epochs_hist.history['accuracy']
plt.plot(eh)
plt.plot(eh2)
plt.title('Training loss and Accuracy graph')
plt.xlabel('epochs')
plt.ylabel('loss and accuracy')
plt.legend({'loss', 'accuracy'})

y_predict = pcos_classifier_model.predict(X_test)

y_predict

evaluation = pcos_classifier_model.evaluate(X_test, y_test)
print('test accuracy:{}'.format(evaluation[1]))

from sklearn.ensemble import RandomForestClassifier
model2 = RandomForestClassifier()
model2.fit(X_train,y_train)
model2.score(X_test, y_test)

from sklearn.neighbors import KNeighborsClassifier
model3 = KNeighborsClassifier()
model3.fit(X_train,y_train)
model3.score(X_test, y_test)

from sklearn.linear_model import LogisticRegression
model4 = LogisticRegression()
model4.fit(X_train,y_train)
model4.score(X_test, y_test)